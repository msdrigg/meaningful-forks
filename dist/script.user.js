// ==UserScript==
// @name         meaningful-forks
// @homepage     https://github.com/aflowofcode/meaningful-forks
// @namespace    http://tampermonkey.net/
// @version      1.2.0
// @description  Sort Github fork lists by the number of stars and commits ahead from the source repo.
// @author       Kevin Li + community
// @match        https://github.com/*
// @grant        none
// ==/UserScript==

(async function(){
/** @preserve NOTE: Do NOT release key with source
   */
let ACCESS_TOKEN="ENTER_ACCESS_TOKEN_HERE";
/** @preserve Number of forks to query
   */let FORK_LOAD_COUNT=50;
/** @preserve Set to <2 for debug, <5 for Errors
   */let DEBUG_LEVEL=3;
/** @preserve Main function handle
   */async function e(){let e=new Headers;e.append("Authorization","token "+ACCESS_TOKEN);const t={headers:e};const o=document.createElement("span");const n="📊 Meaningful Forks is gathering data...";const r="✨ Updating stars...";const a="🍴 Sorting forks (might take a sec)...";const s="🔀 Rearranging order...";o.innerText=n;o.style.background="#22f922";o.style.borderRadius="10px";o.style.color="black";o.style.fontWeight="bold";o.style.padding="10px";o.style.width="max-content";o.style.height="calc(20px + 1.5em)";o.style.bottom="calc(10vh - 40px)";o.style.left="0";o.style.right="0";o.style.zIndex="9999";o.style.position="fixed";o.style.margin="0 auto";document.body.appendChild(o);document.querySelector(".footer").style["margin-bottom"]="10vh";const i=document.querySelector("#network");const l=i.querySelectorAll(".repo")[0].lastElementChild.getAttribute("href").substring(1);if(DEBUG_LEVEL<2)console.log("TCL: currentRepoUrl",l);const c=l.substring(0,l.lastIndexOf("/"));const d=`https://api.github.com/repos/${l}/forks?sort=stargazers&per_page=${FORK_LOAD_COUNT}`;if(DEBUG_LEVEL<2)console.log("TCL: forkApiUrl",d);let u=await fetch(d,t).then((e=>{if(!e.ok)throw new Error(`Failed to get the api url, exiting with status: ${e.status}`);else return e.json()})).then((e=>e)).catch((e=>{if(DEBUG_LEVEL<5)console.log(e);o.innerText="Problem accessing API. If you've entered your personal access token & this always happens here, this repo probably doesn't allow API access 😕";setTimeout((()=>{o.remove()}),7500)}));let f={};u.forEach((e=>{f[e.full_name]=e}));let h={headers:{Authorization:"token "+ACCESS_TOKEN,Accept:"application/json"}};await fetch(`https://github.com/${l}/network/meta`,h).then((e=>e.json())).then((e=>{if(DEBUG_LEVEL<2)console.log(JSON.stringify(e,null,4));Promise.all(e.users.map((async e=>{let o=`${e.name}/${e.repo}`;if(!(o in f))await fetch(`https://api.github.com/repos/${o}`,t).then((e=>e.json())).then((e=>{u.push(e)})).catch((e=>{if(DEBUG_LEVEL<5)console.error("Error getting recently updated user: ");if(DEBUG_LEVEL<5)console.log(e)}))})))})).catch((e=>{if(DEBUG_LEVEL<5)console.error("Error getting recently updated user: ");if(DEBUG_LEVEL<5)console.log(e)}));let p=[],g=[];await Promise.all(u.map((async e=>{if(e.forks>0){if(DEBUG_LEVEL<2)console.log(`${e.full_name} has ${e.forks} subforks`);let o=await fetch(e.forks_url+`?sort=stargazers&per_page=${FORK_LOAD_COUNT}`,t);let n=await o.json();n.forEach((t=>{if(t.pushed_at!==e.pushed_at){t.is_subfork=true;t.forked_from=e.full_name;p=p.concat(t)}else g.push(t)}))}})));if(DEBUG_LEVEL<2)console.log(`Found ${p.length} relevant subforks`,p);let m=u.concat(p);if(DEBUG_LEVEL<2)console.log("TCL: forks.length: "+m.length);const b=[];let y=[];o.innerText=r;await Promise.all(m.map((async(e,o,n)=>{if(void 0===e.owner){if(DEBUG_LEVEL<2)console.log("marking bad fork for delete",o,e);y.push(o);return}const r=e["owner"]["login"];if(DEBUG_LEVEL<2)console.log("TCL: authorName",r,o);if("undefined"===r)return;const a=e["stargazers_url"];b.push(await fetch(a,t).then((e=>{if(e.ok)return e.json();throw new Error("Network response is not OK!")})).then((e=>{e.forEach((e=>{if(e["login"]===r&&n[o]["stargazers_count"]>0){if(DEBUG_LEVEL<2)console.log(`TCL: starCount of ${r} before: ${n[o]["stargazers_count"]}`);n[o]["stargazers_count"]--;if(DEBUG_LEVEL<2)console.log(`TCL: starCount of ${r} after: ${n[o]["stargazers_count"]}`)}}))})).catch((function(t){if(DEBUG_LEVEL<5)console.log("There has been a problem with your fetch operation: ",t.message,e)})))})));if(DEBUG_LEVEL<2)console.log(`found ${y.length} forks with bad data out of ${m.length}`,y);if(y.length>0)y=$(y);await Promise.all(b);m.sort(C("stargazers_count",true,parseInt));if(DEBUG_LEVEL<2)console.log("End of modifying stargazer count!");o.innerText=a;let w=await k(l);await A(m,(async(e,t,o)=>{try{const n=e["owner"]["login"];const r=e["full_name"];const a=e.default_branch;const s=`https://api.github.com/repos/${r}/compare/${c}:${w}...${n}:${a}`;await _(s,["ahead_by","behind_by"]).then((e=>{o[t]["ahead_by"]=e[0];o[t]["behind_by"]=e[1]}))}catch(e){if(DEBUG_LEVEL<5)console.log(e)}if(e.is_subfork&&0===e["ahead_by"]){if(DEBUG_LEVEL<2)console.log("marking subfork ahead_by 0 for delete",t,e.full_name);y.push(t);return}}));if(DEBUG_LEVEL<2)console.log(`found ${y.length} subforks ahead_by 0 out of ${m.length}`,y);if(y.length>0)y=$(y);o.innerText=s;m.sort(v({name:"stargazers_count",primer:parseInt,highToLow:true},{name:"ahead_by",primer:parseInt,highToLow:true},{name:"behind_by",primer:parseInt,highToLow:false}));if(DEBUG_LEVEL<2)console.log("Beginning of DOM operations!");m.reverse().forEach((e=>{if(DEBUG_LEVEL<2)console.log("TCL: fork",e);const t=e["full_name"];const o=e["stargazers_count"];let n=false;const r=i.querySelectorAll("div.repo"),a=r.length>2?r[1].querySelector("svg"):void 0;for(let o=0;o<r.length;o++){const i=r[o].lastElementChild.getAttribute("href");if(i){const l=i.substring(1);if(l===t){n=true;if(e.hasOwnProperty("is_subfork")&&e.is_subfork){if(DEBUG_LEVEL<2)console.log("adding dagger to subfork");const e=document.createTextNode("‡"),t=r[o].querySelectorAll("svg");if(a)t[0].replaceWith(a.cloneNode(true));t[1].replaceWith(e)}s(r[o]);break}}}if(!n){if(DEBUG_LEVEL<2)console.log(`${t} repo wasn't showing`);const o=document.createElement("div");o.dataset.found="alreadyFound";o.classList.add("repo");const n=e["owner"]["type"].toLowerCase();const r=document.createElement("a");r.setAttribute("data-hovercard-type",n);const i=e["owner"]["login"];if("user"===n){const t=e["owner"]["id"];r.setAttribute("data-hovercard-url",`/hovercards?user_id=${t}`)}else if("organization"===n){r.setAttribute("data-hovercard-url",`/orgs/${i}/hovercard`);r.setAttribute("href",`/${i}`)}r.setAttribute("href",`/${i}`);r.setAttribute("data-octo-click","hovercard-link-click");r.setAttribute("data-octo-dimensions","link_type:self");const l=r.cloneNode(true);l.style.paddingLeft="4px";l.style.paddingRight="4px";r.innerText=i;l.classList.add("d-inline-block");const c=document.createElement("img");c.classList.add("gravatar");const d=e["owner"]["avatar_url"];c.src=d;c.width="16";c.height="16";c.alt=`@${i}`;l.appendChild(c);const u=document.createElement("a");u.style.paddingRight="4px";u.setAttribute("href",`/${t}`);u.innerText=e["name"];o.appendChild(a.cloneNode(true));o.appendChild(l);o.appendChild(r);o.appendChild(document.createTextNode(" / "));o.appendChild(u);s(o)}function s(t){if(DEBUG_LEVEL<2)console.log("adding status",t);const n=document.createDocumentFragment();n.appendChild(x("star"));n.appendChild(document.createTextNode(o+" "));if(void 0!==e["ahead_by"]&&void 0!==e["behind_by"]){if(e["ahead_by"]>0){const t=x("up");n.appendChild(t);n.appendChild(document.createTextNode(e["ahead_by"]+" "))}if(e["ahead_by"]-e["behind_by"]>0)n.appendChild(x("flame"))}if(e.is_subfork){const t=document.createElement("span");t.appendChild(document.createTextNode(` (subfork of ${e.forked_from})`));t.style["margin-left"]="8px";n.appendChild(t)}t.appendChild(n);i.firstElementChild.insertAdjacentElement("afterend",t)}if(e.hasOwnProperty("stargazers_count"))if(DEBUG_LEVEL<2)console.log("TCL: starCount",e["stargazers_count"])}));if(DEBUG_LEVEL<2)console.log("finished sorting");o.remove();async function _(e,o){let n=await fetch(e,t).then((e=>e.json()));if("string"===typeof o)return r(n,o);else if(Array.isArray(o))return o.map((e=>r(n,e)));function r(e,t){if(t.indexOf(".")>=0){let o=e;const n=t.split(".");n.forEach((e=>{o=o[e]}));return o}else return e[t]}}async function k(e){const t=`https://api.github.com/repos/${e}`;return _(t,"default_branch")}function C(e,t,o){var n=o?function(t){return o(t[e])}:function(t){return t[e]};t=!t?1:-1;return function(e,o){return e=n(e),o=n(o),t*((e>o)-(o>e))}}function v(){var e=[].slice.call(arguments),t=e.length;return function(o,n){var r,a,s,i,l,c,d;for(d=0;d<t;d++){c=0;s=e[d];i="string"===typeof s?s:s.name;r=o[i];a=n[i];if("undefined"!==typeof s.primer){r=s.primer(r);a=s.primer(a)}l=s.highToLow?-1:1;if(r<a)c=-1*l;if(r>a)c=1*l;if(0!==c)break}return c}}function x(e){const t="http://www.w3.org/2000/svg";var o=document.createElementNS(t,"svg");o.setAttribute("height",12);o.setAttribute("width",10.5);o.setAttribute("viewBox","0 0 14 16");o.style["vertical-align"]="middle";o.style["fill"]="currentColor";o.style["position"]="relative";o.style["bottom"]="1px";o.style["margin-left"]="8px";o.classList.add("opticon","opticon-"+e);var n=document.createElementNS(t,"title");var r=document.createElementNS(t,"path");switch(e){case"star":n.appendChild(document.createTextNode("Number of real stars (excluding author's star)"));r.setAttribute("d","M14 6l-4.9-0.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14l4.33-2.33 4.33 2.33L10.4 9.26 14 6z");break;case"up":n.appendChild(document.createTextNode("Number of commits ahead"));r.setAttribute("d","M5 3L0 9h3v4h4V9h3L5 3z");r.setAttribute("fill","#84ed47");o.setAttribute("viewBox","0 0 10 16");o.setAttribute("height",16);break;case"flame":n.appendChild(document.createTextNode("Fork may be more recent than upstream."));r.setAttribute("d","M5.05 0.31c0.81 2.17 0.41 3.38-0.52 4.31-0.98 1.05-2.55 1.83-3.63 3.36-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-0.3-6.61-0.61 2.03 0.53 3.33 1.94 2.86 1.39-0.47 2.3 0.53 2.27 1.67-0.02 0.78-0.31 1.44-1.13 1.81 3.42-0.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52 0.13-2.03 1.13-1.89 2.75 0.09 1.08-1.02 1.8-1.86 1.33-0.67-0.41-0.66-1.19-0.06-1.78 1.25-1.23 1.75-4.09-1.88-6.22l-0.02-0.02z");r.setAttribute("fill","#d26911");break}r.appendChild(n);o.appendChild(r);return o}async function A(e,t){const o=[];for(let n=0;n<e.length;n++)o.push(t(e[n],n,e));return Promise.all(o)}function $(e){for(let t=0;t<e.length;t++){if(DEBUG_LEVEL<2)console.log("deleting:",m[e[t]]);delete m[e[t]]}m=m.filter((e=>void 0!==e));if(DEBUG_LEVEL<2)console.log(`${m.length} remaining forks`);return[]}}async function t(e,o){let n=document.querySelectorAll(e);if(n&&n.length>0){let r=false;n.forEach((function(e){if("alreadyFound"!=e.dataset.found){e.dataset.found="alreadyFound";r=true}}));if(r){o().finally((()=>{setTimeout((()=>{t(e,o)}),1e3)}));return}}setTimeout((()=>{t(e,o)}),1e3)}await t("#network>.repo",e)})();